Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 51.64      3.22     3.22 197339543     0.00     0.00  menu(SDL_Window*)
 10.10      3.85     0.63  3411003     0.00     0.00  heuristique(Damier&, int)
  8.98      4.41     0.56      828     0.68     7.39  alphaBeta(Table&, Damier&, int, char, int, int, bool)
  7.94      4.91     0.50  5836860     0.00     0.00  joueCoup(Damier&, int, int, int)
  6.74      5.33     0.42 91415332     0.00     0.00  estValide(Damier&, int, int, int)
  6.25      5.72     0.39  5836799     0.00     0.00  Damier::Damier(Damier const&)
  6.09      6.10     0.38  5837688     0.00     0.00  hashage(Damier&)
  1.92      6.22     0.12       30     4.00   200.34  MTD(int, Table&, Damier&, int, char)
  0.32      6.24     0.02  2417869     0.00     0.00  testFin(Damier&)
  0.00      6.24     0.00       62     0.00     0.00  Damier::affiche()
  0.00      6.24     0.00        2     0.00     0.00  Table::Table()
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z10alphaBeta2R6Damiericiib
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z10playerVSIAi
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z11heuristiqueR6Damieri
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9estValideR6Damieriii
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN5TableC2Ev
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_KiS3_
  0.00      6.24     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00      6.24     0.00        1     0.00     0.00  score(Damier&, int)
  0.00      6.24     0.00        1     0.00     0.00  Table::~Table()
  0.00      6.24     0.00        1     0.00     0.00  Damier::Damier(int const (*) [8], int const (*) [8])

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.16% of 6.24 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    6.24                 IAVSIA(int) [1]
                0.12    5.89      30/30          MTD(int, Table&, Damier&, int, char) [3]
                0.02    0.21      31/828         alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
                0.00    0.00      62/2417869     testFin(Damier&) [10]
                0.00    0.00      61/5836860     joueCoup(Damier&, int, int, int) [7]
                0.00    0.00      61/5837688     hashage(Damier&) [9]
                0.00    0.00      61/91415332     estValide(Damier&, int, int, int) [5]
                0.00    0.00      60/197339543     menu(SDL_Window*) [4]
                0.00    0.00       2/3411003     heuristique(Damier&, int) [6]
                0.00    0.00      62/62          Damier::affiche() [18]
                0.00    0.00       2/2           Table::Table() [19]
                0.00    0.00       1/1           Damier::Damier(int const (*) [8], int const (*) [8]) [30]
                0.00    0.00       1/1           score(Damier&, int) [28]
                0.00    0.00       1/1           Table::~Table() [29]
-----------------------------------------------
                             5836799             alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
                0.02    0.21      31/828         IAVSIA(int) [1]
                0.54    5.35     797/828         MTD(int, Table&, Damier&, int, char) [3]
[2]     98.1    0.56    5.56     828+5836799 alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
                0.42    2.34 91415271/91415332     estValide(Damier&, int, int, int) [5]
                0.63    0.00 3411001/3411003     heuristique(Damier&, int) [6]
                0.56    0.00 34486665/197339543     menu(SDL_Window*) [4]
                0.50    0.00 5836799/5836860     joueCoup(Damier&, int, int, int) [7]
                0.39    0.00 5836799/5836799     Damier::Damier(Damier const&) [8]
                0.38    0.00 5837627/5837688     hashage(Damier&) [9]
                0.02    0.32 2417807/2417869     testFin(Damier&) [10]
                             5836799             alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
-----------------------------------------------
                0.12    5.89      30/30          IAVSIA(int) [1]
[3]     96.3    0.12    5.89      30         MTD(int, Table&, Damier&, int, char) [3]
                0.54    5.35     797/828         alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
-----------------------------------------------
                0.00    0.00      60/197339543     IAVSIA(int) [1]
                0.32    0.00 19661875/197339543     testFin(Damier&) [10]
                0.56    0.00 34486665/197339543     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
                2.34    0.00 143190943/197339543     estValide(Damier&, int, int, int) [5]
[4]     51.6    3.22    0.00 197339543         menu(SDL_Window*) [4]
-----------------------------------------------
                0.00    0.00      61/91415332     IAVSIA(int) [1]
                0.42    2.34 91415271/91415332     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
[5]     44.2    0.42    2.34 91415332         estValide(Damier&, int, int, int) [5]
                2.34    0.00 143190943/197339543     menu(SDL_Window*) [4]
-----------------------------------------------
                0.00    0.00       2/3411003     IAVSIA(int) [1]
                0.63    0.00 3411001/3411003     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
[6]     10.1    0.63    0.00 3411003         heuristique(Damier&, int) [6]
-----------------------------------------------
                0.00    0.00      61/5836860     IAVSIA(int) [1]
                0.50    0.00 5836799/5836860     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
[7]      7.9    0.50    0.00 5836860         joueCoup(Damier&, int, int, int) [7]
-----------------------------------------------
                0.39    0.00 5836799/5836799     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
[8]      6.3    0.39    0.00 5836799         Damier::Damier(Damier const&) [8]
-----------------------------------------------
                0.00    0.00      61/5837688     IAVSIA(int) [1]
                0.38    0.00 5837627/5837688     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
[9]      6.1    0.38    0.00 5837688         hashage(Damier&) [9]
-----------------------------------------------
                0.00    0.00      62/2417869     IAVSIA(int) [1]
                0.02    0.32 2417807/2417869     alphaBeta(Table&, Damier&, int, char, int, int, bool) [2]
[10]     5.5    0.02    0.32 2417869         testFin(Damier&) [10]
                0.32    0.00 19661875/197339543     menu(SDL_Window*) [4]
-----------------------------------------------
                0.00    0.00      62/62          IAVSIA(int) [1]
[18]     0.0    0.00    0.00      62         Damier::affiche() [18]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(int) [1]
[19]     0.0    0.00    0.00       2         Table::Table() [19]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[20]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z10alphaBeta2R6Damiericiib [20]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[21]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z10playerVSIAi [21]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[22]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z11heuristiqueR6Damieri [22]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[23]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric [23]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[24]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9estValideR6Damieriii [24]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[25]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN5TableC2Ev [25]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[26]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_KiS3_ [26]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [46]
[27]     0.0    0.00    0.00       1         _GLOBAL__sub_I_main [27]
-----------------------------------------------
                0.00    0.00       1/1           IAVSIA(int) [1]
[28]     0.0    0.00    0.00       1         score(Damier&, int) [28]
-----------------------------------------------
                0.00    0.00       1/1           IAVSIA(int) [1]
[29]     0.0    0.00    0.00       1         Table::~Table() [29]
-----------------------------------------------
                0.00    0.00       1/1           IAVSIA(int) [1]
[30]     0.0    0.00    0.00       1         Damier::Damier(int const (*) [8], int const (*) [8]) [30]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [20] _GLOBAL__sub_I__Z10alphaBeta2R6Damiericiib [6] heuristique(Damier&, int) [5] estValide(Damier&, int, int, int)
  [21] _GLOBAL__sub_I__Z10playerVSIAi [3] MTD(int, Table&, Damier&, int, char) [19] Table::Table()
  [22] _GLOBAL__sub_I__Z11heuristiqueR6Damieri [4] menu(SDL_Window*) [29] Table::~Table()
  [23] _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric [28] score(Damier&, int) [18] Damier::affiche()
  [24] _GLOBAL__sub_I__Z9estValideR6Damieriii [9] hashage(Damier&) [30] Damier::Damier(int const (*) [8], int const (*) [8])
  [25] _GLOBAL__sub_I__ZN5TableC2Ev [10] testFin(Damier&)  [8] Damier::Damier(Damier const&)
  [26] _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_KiS3_ [7] joueCoup(Damier&, int, int, int)
  [27] _GLOBAL__sub_I_main     [2] alphaBeta(Table&, Damier&, int, char, int, int, bool)
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 22.49      0.40     0.40  3134331     0.00     0.00  heuristique(Damier&, int)
 17.43      0.71     0.31 15840933     0.00     0.00  ID(long, char, Damier&, Table&, int)
 17.15      1.02     0.31      470     0.65     2.86  alphaBetaTT(Table&, Damier&, int, char, int, int, bool)
 12.93      1.25     0.23  3564565     0.00     0.00  Damier::Damier(Damier const&)
 12.37      1.47     0.22  3565575     0.00     0.00  hashage(Damier&)
 10.68      1.66     0.19  3564625     0.00     0.00  joueCoup(Damier&, int, int, int)
  3.37      1.72     0.06   430706     0.00     0.00  possibilites(int (*) [2], Damier&, int&, int)
  2.81      1.77     0.05 27988974     0.00     0.00  estValide(Damier&, int, int, int)
  0.56      1.78     0.01       60     0.17     0.17  Table::reset()
  0.28      1.78     0.01                             alphaBeta(Damier&, int, char, int, int, int&, bool)
  0.00      1.78     0.00      150     0.00     0.00  MTD(int, Table&, Damier&, int, char)
  0.00      1.78     0.00       61     0.00    19.25  testFin(Damier&)
  0.00      1.78     0.00       61     0.00     0.00  Damier::affiche()
  0.00      1.78     0.00        2     0.00     0.00  score(Damier&, int)
  0.00      1.78     0.00        2     0.00     0.00  Table::Table()
  0.00      1.78     0.00        2     0.00     0.00  Table::~Table()
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z10playerVSIAi
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z11alphaBetaTTR5TableR6Damiericiib
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z12possibilitesPA2_iR6DamierRii
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z2IDlcR6DamierR5Tablei
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z4testv
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9alphaBetaR6DamiericiiRib
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9estValideR6Damieriii
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN5TableC2Ev
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_Ki
  0.00      1.78     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00      1.78     0.00        1     0.00     0.00  Damier::Damier(int const (*) [8])

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.56% of 1.78 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.7    0.00    1.78                 IAVSIA(char) [1]
                0.00    1.17      61/61          testFin(Damier&) [4]
                0.12    0.17      90/537         ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                0.08    0.12      60/537         estValide(Damier&, int, int, int) <cycle 1> [11]
                0.04    0.06      30/537         alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                0.01    0.00      60/60          Table::reset() [12]
                0.00    0.00      90/3565575     hashage(Damier&) [8]
                0.00    0.00      60/3564625     joueCoup(Damier&, int, int, int) [9]
                0.00    0.00       2/3134331     heuristique(Damier&, int) [5]
                0.00    0.00      61/61          Damier::affiche() [22]
                0.00    0.00       2/2           Table::Table() [24]
                0.00    0.00       2/2           score(Damier&, int) [23]
                0.00    0.00       2/2           Table::~Table() [25]
                0.00    0.00       1/1           Damier::Damier(int const (*) [8]) [37]
-----------------------------------------------
[2]     99.2    0.73    1.04     537+44260696 <cycle 1 as a whole> [2]
                0.31    1.04     470+3564565     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                0.31    0.00 15840933             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                0.06    0.00  430706             possibilites(int (*) [2], Damier&, int&, int) <cycle 1> [10]
                0.05    0.00 27988974             estValide(Damier&, int, int, int) <cycle 1> [11]
                0.00    0.00     150             MTD(int, Table&, Damier&, int, char) <cycle 1> [21]
-----------------------------------------------
                             3564565             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                                 440             MTD(int, Table&, Damier&, int, char) <cycle 1> [21]
                0.04    0.06      30/537         IAVSIA(char) [1]
[3]     75.6    0.31    1.04     470+3564565 alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                0.40    0.00 3134329/3134331     heuristique(Damier&, int) [5]
                0.23    0.00 3564565/3564565     Damier::Damier(Damier const&) [7]
                0.22    0.00 3565035/3565575     hashage(Damier&) [8]
                0.19    0.00 3564565/3564625     joueCoup(Damier&, int, int, int) [9]
                              430706             possibilites(int (*) [2], Damier&, int&, int) <cycle 1> [10]
                             3564565             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
-----------------------------------------------
                0.00    1.17      61/61          IAVSIA(char) [1]
[4]     65.9    0.00    1.17      61         testFin(Damier&) [4]
                0.48    0.69     357/537         ID(long, char, Damier&, Table&, int) <cycle 1> [6]
-----------------------------------------------
                0.00    0.00       2/3134331     IAVSIA(char) [1]
                0.40    0.00 3134329/3134331     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[5]     22.5    0.40    0.00 3134331         heuristique(Damier&, int) [5]
-----------------------------------------------
                             1368050             estValide(Damier&, int, int, int) <cycle 1> [11]
                             14472436             possibilites(int (*) [2], Damier&, int&, int) <cycle 1> [10]
                0.12    0.17      90/537         IAVSIA(char) [1]
                0.48    0.69     357/537         testFin(Damier&) [4]
[6]     17.4    0.31    0.00 15840933         ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                0.00    0.00     450/3565575     hashage(Damier&) [8]
                                 150             MTD(int, Table&, Damier&, int, char) <cycle 1> [21]
-----------------------------------------------
                0.23    0.00 3564565/3564565     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[7]     12.9    0.23    0.00 3564565         Damier::Damier(Damier const&) [7]
-----------------------------------------------
                0.00    0.00      90/3565575     IAVSIA(char) [1]
                0.00    0.00     450/3565575     ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                0.22    0.00 3565035/3565575     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[8]     12.4    0.22    0.00 3565575         hashage(Damier&) [8]
-----------------------------------------------
                0.00    0.00      60/3564625     IAVSIA(char) [1]
                0.19    0.00 3564565/3564625     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[9]     10.7    0.19    0.00 3564625         joueCoup(Damier&, int, int, int) [9]
-----------------------------------------------
                              430706             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[10]     3.4    0.06    0.00  430706         possibilites(int (*) [2], Damier&, int&, int) <cycle 1> [10]
                             27988914             estValide(Damier&, int, int, int) <cycle 1> [11]
                             14472436             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
-----------------------------------------------
                             27988914             possibilites(int (*) [2], Damier&, int&, int) <cycle 1> [10]
                0.08    0.12      60/537         IAVSIA(char) [1]
[11]     2.8    0.05    0.00 27988974         estValide(Damier&, int, int, int) <cycle 1> [11]
                             1368050             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
-----------------------------------------------
                0.01    0.00      60/60          IAVSIA(char) [1]
[12]     0.6    0.01    0.00      60         Table::reset() [12]
-----------------------------------------------
                                                 <spontaneous>
[13]     0.3    0.01    0.00                 alphaBeta(Damier&, int, char, int, int, int&, bool) [13]
-----------------------------------------------
                                 150             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
[21]     0.0    0.00    0.00     150         MTD(int, Table&, Damier&, int, char) <cycle 1> [21]
                                 440             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
-----------------------------------------------
                0.00    0.00      61/61          IAVSIA(char) [1]
[22]     0.0    0.00    0.00      61         Damier::affiche() [22]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(char) [1]
[23]     0.0    0.00    0.00       2         score(Damier&, int) [23]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(char) [1]
[24]     0.0    0.00    0.00       2         Table::Table() [24]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(char) [1]
[25]     0.0    0.00    0.00       2         Table::~Table() [25]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[26]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z10playerVSIAi [26]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[27]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z11alphaBetaTTR5TableR6Damiericiib [27]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[28]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z12possibilitesPA2_iR6DamierRii [28]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[29]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z2IDlcR6DamierR5Tablei [29]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[30]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric [30]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[31]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z4testv [31]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[32]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9alphaBetaR6DamiericiiRib [32]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[33]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9estValideR6Damieriii [33]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[34]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN5TableC2Ev [34]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[35]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_Ki [35]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [52]
[36]     0.0    0.00    0.00       1         _GLOBAL__sub_I_main [36]
-----------------------------------------------
                0.00    0.00       1/1           IAVSIA(char) [1]
[37]     0.0    0.00    0.00       1         Damier::Damier(int const (*) [8]) [37]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [26] _GLOBAL__sub_I__Z10playerVSIAi [36] _GLOBAL__sub_I_main [13] alphaBeta(Damier&, int, char, int, int, int&, bool)
  [27] _GLOBAL__sub_I__Z11alphaBetaTTR5TableR6Damiericiib [3] alphaBetaTT(Table&, Damier&, int, char, int, int, bool) [11] estValide(Damier&, int, int, int)
  [28] _GLOBAL__sub_I__Z12possibilitesPA2_iR6DamierRii [5] heuristique(Damier&, int) [12] Table::reset()
  [29] _GLOBAL__sub_I__Z2IDlcR6DamierR5Tablei [10] possibilites(int (*) [2], Damier&, int&, int) [24] Table::Table()
  [30] _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric [6] ID(long, char, Damier&, Table&, int) [25] Table::~Table()
  [31] _GLOBAL__sub_I__Z4testv [21] MTD(int, Table&, Damier&, int, char) [22] Damier::affiche()
  [32] _GLOBAL__sub_I__Z9alphaBetaR6DamiericiiRib [23] score(Damier&, int) [37] Damier::Damier(int const (*) [8])
  [33] _GLOBAL__sub_I__Z9estValideR6Damieriii [8] hashage(Damier&) [7] Damier::Damier(Damier const&)
  [34] _GLOBAL__sub_I__ZN5TableC2Ev [4] testFin(Damier&)   [2] <cycle 1>
  [35] _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_Ki [9] joueCoup(Damier&, int, int, int)
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 22.14      5.61     5.61 46897362     0.00     0.00  heuristique(Damier&, int)
 21.73     11.12     5.51      759     7.26    25.68  alphaBetaTT(Table&, Damier&, int, char, int, int, bool)
 15.65     15.09     3.97 182318633     0.00     0.00  ID(long, char, Damier&, Table&, int)
 11.96     18.12     3.03 51909133     0.00     0.00  joueCoup(Damier&, int, int, int)
 10.80     20.86     2.74 51909073     0.00     0.00  Damier::Damier(Damier const&)
 10.26     23.46     2.60 51910462     0.00     0.00  hashage(Damier&)
  4.22     24.53     1.07  5012472     0.00     0.00  possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int)
  3.02     25.30     0.77 325790260     0.00     0.00  estValide(Damier&, int, int, int)
  0.16     25.34     0.04       60     0.67     0.67  Table::reset()
  0.06     25.35     0.02                             alphaBeta(Damier&, int, char, int, int, int&, bool)
  0.06     25.37     0.02                             Damier::init(Damier*, int const (*) [8])
  0.00     25.37     0.00      180     0.00     0.00  MTD(int, Table&, Damier&, int, char)
  0.00     25.37     0.00       61     0.00   277.72  testFin(Damier&)
  0.00     25.37     0.00       61     0.00     0.00  Damier::affiche()
  0.00     25.37     0.00        2     0.00     0.00  score(Damier&, int)
  0.00     25.37     0.00        2     0.00     0.00  Table::Table()
  0.00     25.37     0.00        2     0.00     0.00  Table::~Table()
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z10playerVSIAi
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z11alphaBetaTTR5TableR6Damiericiib
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z12possibilitesPA2_iR6DamierRii
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z2IDlcR6DamierR5Tablei
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z4testv
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9alphaBetaR6DamiericiiRib
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9estValideR6Damieriii
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN5TableC2Ev
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_Ki
  0.00     25.37     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00     25.37     0.00        1     0.00     0.00  Damier::Damier(int const (*) [8])

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.04% of 25.37 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.9    0.00   25.34                 IAVSIA(char) [1]
                0.00   16.94      61/61          testFin(Damier&) [4]
                1.87    2.31      90/545         ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                1.25    1.54      60/545         estValide(Damier&, int, int, int) <cycle 1> [11]
                0.62    0.77      30/545         alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                0.04    0.00      60/60          Table::reset() [12]
                0.00    0.00      90/51910462     hashage(Damier&) [9]
                0.00    0.00      60/51909133     joueCoup(Damier&, int, int, int) [7]
                0.00    0.00       2/46897362     heuristique(Damier&, int) [5]
                0.00    0.00      61/61          Damier::affiche() [23]
                0.00    0.00       2/2           Table::Table() [25]
                0.00    0.00       2/2           score(Damier&, int) [24]
                0.00    0.00       2/2           Table::~Table() [26]
                0.00    0.00       1/1           Damier::Damier(int const (*) [8]) [38]
-----------------------------------------------
[2]     99.7   11.31   13.98     545+513121759 <cycle 1 as a whole> [2]
                5.51   13.98     759+51909073     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                3.97    0.00 182318633             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                1.07    0.00 5012472             possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int) <cycle 1> [10]
                0.77    0.00 325790260             estValide(Damier&, int, int, int) <cycle 1> [11]
                0.00    0.00     180             MTD(int, Table&, Damier&, int, char) <cycle 1> [22]
-----------------------------------------------
                             51909073             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                                 729             MTD(int, Table&, Damier&, int, char) <cycle 1> [22]
                0.62    0.77      30/545         IAVSIA(char) [1]
[3]     76.8    5.51   13.98     759+51909073 alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
                5.61    0.00 46897360/46897362     heuristique(Damier&, int) [5]
                3.03    0.00 51909073/51909133     joueCoup(Damier&, int, int, int) [7]
                2.74    0.00 51909073/51909073     Damier::Damier(Damier const&) [8]
                2.60    0.00 51909832/51910462     hashage(Damier&) [9]
                             5012472             possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int) <cycle 1> [10]
                             51909073             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
-----------------------------------------------
                0.00   16.94      61/61          IAVSIA(char) [1]
[4]     66.8    0.00   16.94      61         testFin(Damier&) [4]
                7.58    9.37     365/545         ID(long, char, Damier&, Table&, int) <cycle 1> [6]
-----------------------------------------------
                0.00    0.00       2/46897362     IAVSIA(char) [1]
                5.61    0.00 46897360/46897362     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[5]     22.1    5.61    0.00 46897362         heuristique(Damier&, int) [5]
-----------------------------------------------
                             18244765             estValide(Damier&, int, int, int) <cycle 1> [11]
                             164073413             possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int) <cycle 1> [10]
                1.87    2.31      90/545         IAVSIA(char) [1]
                7.58    9.37     365/545         testFin(Damier&) [4]
[6]     15.6    3.97    0.00 182318633         ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                0.00    0.00     540/51910462     hashage(Damier&) [9]
                                 180             MTD(int, Table&, Damier&, int, char) <cycle 1> [22]
-----------------------------------------------
                0.00    0.00      60/51909133     IAVSIA(char) [1]
                3.03    0.00 51909073/51909133     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[7]     12.0    3.03    0.00 51909133         joueCoup(Damier&, int, int, int) [7]
-----------------------------------------------
                2.74    0.00 51909073/51909073     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[8]     10.8    2.74    0.00 51909073         Damier::Damier(Damier const&) [8]
-----------------------------------------------
                0.00    0.00      90/51910462     IAVSIA(char) [1]
                0.00    0.00     540/51910462     ID(long, char, Damier&, Table&, int) <cycle 1> [6]
                2.60    0.00 51909832/51910462     alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[9]     10.3    2.60    0.00 51910462         hashage(Damier&) [9]
-----------------------------------------------
                             5012472             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
[10]     4.2    1.07    0.00 5012472         possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int) <cycle 1> [10]
                             325790200             estValide(Damier&, int, int, int) <cycle 1> [11]
                             164073413             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
-----------------------------------------------
                             325790200             possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int) <cycle 1> [10]
                1.25    1.54      60/545         IAVSIA(char) [1]
[11]     3.0    0.77    0.00 325790260         estValide(Damier&, int, int, int) <cycle 1> [11]
                             18244765             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
-----------------------------------------------
                0.04    0.00      60/60          IAVSIA(char) [1]
[12]     0.2    0.04    0.00      60         Table::reset() [12]
-----------------------------------------------
                                                 <spontaneous>
[13]     0.1    0.02    0.00                 alphaBeta(Damier&, int, char, int, int, int&, bool) [13]
-----------------------------------------------
                                                 <spontaneous>
[14]     0.1    0.02    0.00                 Damier::init(Damier*, int const (*) [8]) [14]
-----------------------------------------------
                                 180             ID(long, char, Damier&, Table&, int) <cycle 1> [6]
[22]     0.0    0.00    0.00     180         MTD(int, Table&, Damier&, int, char) <cycle 1> [22]
                                 729             alphaBetaTT(Table&, Damier&, int, char, int, int, bool) <cycle 1> [3]
-----------------------------------------------
                0.00    0.00      61/61          IAVSIA(char) [1]
[23]     0.0    0.00    0.00      61         Damier::affiche() [23]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(char) [1]
[24]     0.0    0.00    0.00       2         score(Damier&, int) [24]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(char) [1]
[25]     0.0    0.00    0.00       2         Table::Table() [25]
-----------------------------------------------
                0.00    0.00       2/2           IAVSIA(char) [1]
[26]     0.0    0.00    0.00       2         Table::~Table() [26]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[27]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z10playerVSIAi [27]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[28]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z11alphaBetaTTR5TableR6Damiericiib [28]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[29]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z12possibilitesPA2_iR6DamierRii [29]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[30]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z2IDlcR6DamierR5Tablei [30]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[31]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric [31]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[32]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z4testv [32]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[33]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9alphaBetaR6DamiericiiRib [33]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[34]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9estValideR6Damieriii [34]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[35]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN5TableC2Ev [35]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[36]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_Ki [36]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [55]
[37]     0.0    0.00    0.00       1         _GLOBAL__sub_I_main [37]
-----------------------------------------------
                0.00    0.00       1/1           IAVSIA(char) [1]
[38]     0.0    0.00    0.00       1         Damier::Damier(int const (*) [8]) [38]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [27] _GLOBAL__sub_I__Z10playerVSIAi [37] _GLOBAL__sub_I_main [13] alphaBeta(Damier&, int, char, int, int, int&, bool)
  [28] _GLOBAL__sub_I__Z11alphaBetaTTR5TableR6Damiericiib [3] alphaBetaTT(Table&, Damier&, int, char, int, int, bool) [11] estValide(Damier&, int, int, int)
  [29] _GLOBAL__sub_I__Z12possibilitesPA2_iR6DamierRii [5] heuristique(Damier&, int) [12] Table::reset()
  [30] _GLOBAL__sub_I__Z2IDlcR6DamierR5Tablei [10] possibilites(int (*) [2], Damier&, int&, int, Table&, unsigned int) [25] Table::Table()
  [31] _GLOBAL__sub_I__Z3MTDiR5TableR6Damieric [6] ID(long, char, Damier&, Table&, int) [26] Table::~Table()
  [32] _GLOBAL__sub_I__Z4testv [22] MTD(int, Table&, Damier&, int, char) [14] Damier::init(Damier*, int const (*) [8])
  [33] _GLOBAL__sub_I__Z9alphaBetaR6DamiericiiRib [24] score(Damier&, int) [23] Damier::affiche()
  [34] _GLOBAL__sub_I__Z9estValideR6Damieriii [9] hashage(Damier&) [38] Damier::Damier(int const (*) [8])
  [35] _GLOBAL__sub_I__ZN5TableC2Ev [4] testFin(Damier&)   [8] Damier::Damier(Damier const&)
  [36] _GLOBAL__sub_I__ZN6Damier4initEPS_PA8_Ki [7] joueCoup(Damier&, int, int, int) [2] <cycle 1>
